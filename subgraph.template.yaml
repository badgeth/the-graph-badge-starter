specVersion: 0.0.2
description: Your Description
repository: Your Repo
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: BadgeDefinitions
    network: "{{network}}"
    source:
      address: "{{badgeRegistry}}"
      abi: BadgeRegistry
      startBlock: {{blockNumber}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/badgeRegistry.ts
      entities:
        - BadgeRegistry
      abis:
        - name: BadgeRegistry
          file: ./abis/BadgeRegistry.json
      eventHandlers:
        - event: BadgeAdded(string,int256)
          handler: handleBadgeAdded
        - event: BadgeRecipientAdded(address,string,int256)
          handler: handleBadgeRecipientAdded
        - event: BadgeMinted(string,int256)
          handler: handleBadgeMinted
        - event: BadgeRecipientDisputed(address,string,int256)
          handler: handleBadgeRecipientDisputed
  - kind: ethereum/contract
    name: Staking
    network: "{{network}}"
    source:
      address: "{{staking}}"
      abi: Staking
      startBlock: {{blockNumber}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/staking.ts
      entities:
        - Indexer
        - IndexerParameterUpdate
        - IndexerSnapshot
        - Allocation
        - GraphNetwork
        - Pool
        - SubgraphDeployment
        - GraphAccount
        - Delegator
        - DelegatedStake
        - Epoch
      abis:
        - name: Staking
          file: ./node_modules/@graphprotocol/contracts/dist/abis/Staking.json
        - name: GraphTokenLockWallet
          file: ./node_modules/@graphprotocol/contracts/dist/abis/GraphToken.json
      eventHandlers:
        - event: StakeDeposited(indexed address,uint256)
          handler: handleStakeDeposited
        - event: StakeLocked(indexed address,uint256,uint256)
          handler: handleStakeLocked
        - event: StakeWithdrawn(indexed address,uint256)
          handler: handleStakeWithdrawn
        - event: StakeSlashed(indexed address,uint256,uint256,address)
          handler: handleStakeSlashed
        - event: DelegationParametersUpdated(indexed address,uint32,uint32,uint32)
          handler: handleDelegationParametersUpdated
        - event: StakeDelegated(indexed address,indexed address,uint256,uint256)
          handler: handleStakeDelegated
        - event: StakeDelegatedLocked(indexed address,indexed address,uint256,uint256,uint256)
          handler: handleStakeDelegatedLocked
        - event: StakeDelegatedWithdrawn(indexed address,indexed address,uint256)
          handler: handleStakeDelegatedWithdrawn
        - event: AllocationCreated(indexed address,indexed bytes32,uint256,uint256,indexed address,bytes32)
          handler: handleAllocationCreated
        - event: AllocationCollected(indexed address,indexed bytes32,uint256,uint256,indexed address,address,uint256,uint256)
          handler: handleAllocationCollected
        - event: AllocationClosed(indexed address,indexed bytes32,uint256,uint256,indexed address,uint256,address,bytes32,bool)
          handler: handleAllocationClosed
        - event: RebateClaimed(indexed address,indexed bytes32,indexed address,uint256,uint256,uint256,uint256,uint256)
          handler: handleRebateClaimed
  # - kind: ethereum/contract
  #   name: RewardsManager
  #   network: mainnet
  #   source:
  #     address: "0x9Ac758AB77733b4150A901ebd659cbF8cB93ED66"
  #     abi: RewardsManager
  #     startBlock: 11446790
  #   mapping:
  #     kind: ethereum/events
  #     apiVersion: 0.0.4
  #     language: wasm/assemblyscript
  #     file: ./src/mappings/rewardsManager.ts
  #     entities:
  #       - Indexer
  #       - IndexerSnapshot
  #     abis:
  #       - name: RewardsManager
  #         file: ./abis/RewardsManager.json
  #     eventHandlers:
  #       - event: RewardsAssigned(indexed address,indexed address,uint256,uint256)
  #         handler: handleRewardsAssigned
